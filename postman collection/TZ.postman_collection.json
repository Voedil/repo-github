{
	"info": {
		"_postman_id": "bf6c917a-e452-448c-af12-a22bcbc7654a",
		"name": "TZ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27520074"
	},
	"item": [
		{
			"name": "Positive",
			"item": [
				{
					"name": "Create User",
					"item": [
						{
							"name": "INT's lines",
							"item": [
								{
									"name": "ID is 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"FirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"LastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"Email\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"Password\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"PhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"{{MyName}}\",\r\n  \"firstName\": \"{{FirstName}}\",\r\n  \"lastName\": \"{{LastName}}\",\r\n  \"email\": \"{{Email}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"phone\": \"{{PhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "ID is -1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"FirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"LastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"Email\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"Password\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"PhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": -1,\r\n  \"username\": \"{{MyName}}\",\r\n  \"firstName\": \"{{FirstName}}\",\r\n  \"lastName\": \"{{LastName}}\",\r\n  \"email\": \"{{Email}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"phone\": \"{{PhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "userStatus is -1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"FirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"LastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"Email\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"Password\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"PhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{$randomInt}},\r\n  \"username\": \"{{MyName}}\",\r\n  \"firstName\": \"{{FirstName}}\",\r\n  \"lastName\": \"{{LastName}}\",\r\n  \"email\": \"{{Email}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"phone\": \"{{PhoneNumber}}\",\r\n  \"userStatus\": -1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "ID/userStatus is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"FirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"LastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"Email\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"Password\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"PhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": null,\r\n  \"username\": \"{{MyName}}\",\r\n  \"firstName\": \"{{FirstName}}\",\r\n  \"lastName\": \"{{LastName}}\",\r\n  \"email\": \"{{Email}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"phone\": \"{{PhoneNumber}}\",\r\n  \"userStatus\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "ID/userStatus is 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"FirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"LastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"Email\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"Password\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"PhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 1,\r\n  \"username\": \"{{MyName}}\",\r\n  \"firstName\": \"{{FirstName}}\",\r\n  \"lastName\": \"{{LastName}}\",\r\n  \"email\": \"{{Email}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"phone\": \"{{PhoneNumber}}\",\r\n  \"userStatus\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "ID/userStatus like a string(numbers)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"FirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"LastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"Email\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"Password\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"PhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"566655434\",\r\n  \"username\": \"{{MyName}}\",\r\n  \"firstName\": \"{{FirstName}}\",\r\n  \"lastName\": \"{{LastName}}\",\r\n  \"email\": \"{{Email}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"phone\": \"{{PhoneNumber}}\",\r\n  \"userStatus\": \"2345234\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Strings lines",
							"item": [
								{
									"name": "username is INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 1337,\r\n  \"username\": 153,\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "firstname is INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 4562,\r\n  \"username\": \"string\",\r\n  \"firstName\": 1516,\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "lastname is INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 7563,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": 12345,\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "email is INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 7245,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": 263445,\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "password is INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 72345,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": 19347433131321231231231245412351235,\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "phone is INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 72345,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": 1251362364262,\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "more than 200 symbols in each line",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 72345,\r\n  \"username\": \"iuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygkjhgkjhgkjhgnbvcnbvcnbvcnbvcnbvctresytrduytfiuygoiuhtrdytrdytrdytrd\",\r\n  \"firstName\": \"iuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygkjhgkjhgkjhgnbvcnbvcnbvcnbvcnbvctresytrduytfiuygoiuhtrdytrdytrdytrd\",\r\n  \"lastName\": \"iuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygkjhgkjhgkjhgnbvcnbvcnbvcnbvcnbvctresytrduytfiuygoiuhtrdytrdytrdytrd\",\r\n  \"email\": \"iuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygkjhgkjhgkjhgnbvcnbvcnbvcnbvcnbvctresytrduytfiuygoiuhtrdytrdytrdytrd\",\r\n  \"password\": \"iuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygkjhgkjhgkjhgnbvcnbvcnbvcnbvcnbvctresytrduytfiuygoiuhtrdytrdytrdytrd\",\r\n  \"phone\": \"iuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygiuygkjhgkjhgkjhgnbvcnbvcnbvcnbvcnbvctresytrduytfiuygoiuhtrdytrdytrdytrd\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "empty strings in \"\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{$randomInt}},\r\n  \"username\": \"\",\r\n  \"firstName\": \"\",\r\n  \"lastName\": \"\",\r\n  \"email\": \"\",\r\n  \"password\": \"\",\r\n  \"phone\": \"\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "1 symbol in stirngs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{$randomInt}},\r\n  \"username\": \"a\",\r\n  \"firstName\": \"a\",\r\n  \"lastName\": \"a\",\r\n  \"email\": \"a\",\r\n  \"password\": \"a\",\r\n  \"phone\": \"a\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Space in strings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{$randomInt}},\r\n  \"username\": \" \",\r\n  \"firstName\": \" \",\r\n  \"lastName\": \" \",\r\n  \"email\": \" \",\r\n  \"password\": \" \",\r\n  \"phone\": \" \",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let json = pm.response.json();\r",
											"pm.environment.set(\"userID\", json.message);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 900ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"code\": {\r",
											"            \"type\": \"integer\"\r",
											"        },\r",
											"        \"type\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"message\": {\r",
											"            \"type\": \"string\"\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\"code\", \"type\", \"message\"]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
											"pm.environment.set(\"FirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
											"pm.environment.set(\"LastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
											"pm.environment.set(\"Email\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
											"pm.environment.set(\"Password\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
											"pm.environment.set(\"PhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{$randomInt}},\r\n  \"username\": \"{{MyName}}\",\r\n  \"firstName\": \"{{FirstName}}\",\r\n  \"lastName\": \"{{LastName}}\",\r\n  \"email\": \"{{Email}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"phone\": \"{{PhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
									"protocol": "{{protocol}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "All is NULL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let json = pm.response.json();\r",
											"pm.environment.set(\"userID\", json.message);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 900ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"code\": {\r",
											"            \"type\": \"integer\"\r",
											"        },\r",
											"        \"type\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"message\": {\r",
											"            \"type\": \"string\"\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\"code\", \"type\", \"message\"]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
											"pm.environment.set(\"FirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
											"pm.environment.set(\"LastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
											"pm.environment.set(\"Email\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
											"pm.environment.set(\"Password\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
											"pm.environment.set(\"PhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": null,\r\n  \"username\": null,\r\n  \"firstName\": null,\r\n  \"lastName\": null,\r\n  \"email\": null,\r\n  \"password\": null,\r\n  \"phone\": null,\r\n  \"userStatus\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
									"protocol": "{{protocol}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "All is 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let json = pm.response.json();\r",
											"pm.environment.set(\"userID\", json.message);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 900ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"code\": {\r",
											"            \"type\": \"integer\"\r",
											"        },\r",
											"        \"type\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"message\": {\r",
											"            \"type\": \"string\"\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\"code\", \"type\", \"message\"]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
											"pm.environment.set(\"FirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
											"pm.environment.set(\"LastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
											"pm.environment.set(\"Email\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
											"pm.environment.set(\"Password\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
											"pm.environment.set(\"PhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"username\": 0,\r\n  \"firstName\": 0,\r\n  \"lastName\": 0,\r\n  \"email\": 0,\r\n  \"password\": 0,\r\n  \"phone\": 0,\r\n  \"userStatus\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
									"protocol": "{{protocol}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"user",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Updated User",
					"item": [
						{
							"name": "INT's lines",
							"item": [
								{
									"name": "ID and userStatus is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": null,\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ID and userStatus is 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Strings lines",
							"item": [
								{
									"name": "username is INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 0,\r\n  \"username\": 143,\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "firstName is INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{userID}}\",\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": 1748,\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "lastName is INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": 1859,\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "email is INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": 568454,\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "password is INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": 35784568,\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "phone is INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": 952683,\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "username is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 0,\r\n  \"username\": null,\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "firstName is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{userID}}\",\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": null,\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "lastName is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": null,\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "email is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": null,\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "password is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": null,\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "phone is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": null,\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Updated User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"User ID is correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"code\": {\r",
											"            \"type\": \"integer\"\r",
											"        },\r",
											"        \"type\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"message\": {\r",
											"            \"type\": \"string\"\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\"code\", \"type\", \"message\"]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
											"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
											"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
											"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
											"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
											"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"user",
										"{{MyName}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is  not 404\", function () {\r",
									"    pm.response.to.not.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"let json = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"username\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"firstName\": {\r",
									"            type: \"string\"\r",
									"        },\r",
									"        \"lastName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"email\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"password\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"phone\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"userStatus\": {\r",
									"            \"type\": \"integer\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"id\", \"username\", \"firstName\", \"lastName\", \"email\", \"password\", \"phone\", \"userStatus\"]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"user",
								"{{MyName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Right user was deleted\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(environment.NewName)\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"code\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"type\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"message\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"code\", \"type\", \"message\"]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"DeleteMessage\", pm.variables.replaceIn(\"So, now you are delete the {{NewName}}\"))\r",
									"console.log(pm.environment.get (\"DeleteMessage\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{NewName}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"user",
								"{{NewName}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "Create User Negative",
					"item": [
						{
							"name": "INT's lines",
							"item": [
								{
									"name": "ID/userStatus like a string(letter)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.id);\r",
													"\r",
													"pm.test(\"Status code is 500(Uncorrect ID)\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"pm.test(\"Message: Something bad happened\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"something bad happened\")\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"mmm\",\r\n  \"username\": \"{{MyName}}\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": \"mmma\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "ID is 40 symbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.id);\r",
													"\r",
													"pm.test(\"Status code is 500(Uncorrect ID)\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"pm.test(\"Message: Something bad happened\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"something bad happened\")\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 1827374647474747483849584736384859572648,\r\n  \"username\": \"{{MyName}}\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "ID is specsymbol (string)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.id);\r",
													"\r",
													"pm.test(\"Status code is 500(Uncorrect ID)\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"pm.test(\"Message: Something bad happened\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"something bad happened\")\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"!@#$%^\",\r\n  \"username\": null,\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "ID is specsymbol (int)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.id);\r",
													"\r",
													"pm.test(\"Status code is 400(Uncorrect ID)\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Message: Bad input\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"bad input\")\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": !@#$%^,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "userStatus is symbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 111,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": @#$%^&\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "String's lines",
							"item": [
								{
									"name": "username is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 111,\r\n  \"username\": ,\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "firstName is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 111,\r\n  \"username\": \"string\",\r\n  \"firstName\": ,\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "lastName is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 111,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": ,\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "email is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 111,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": ,\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "password is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 111,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": ,\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "phone is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 111,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": ,\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "userStatus is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 111,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "username is symbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 111,\r\n  \"username\": $%^&,\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "firstName is symbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 111,\r\n  \"username\": \"string\",\r\n  \"firstName\": #$%^&,\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "lastName is symbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 111,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": !@#$%^,\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "email is symbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 111,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": #$%^&*(,\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "password is symbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 111,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": !@#$%^&,\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "phone is symbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();\r",
													"pm.environment.set(\"userID\", json.message);\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 900ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"MyName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 111,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": @!#$%^&77,\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												""
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Updated User Negative",
					"item": [
						{
							"name": "INT's lines",
							"item": [
								{
									"name": "ID and userStatus is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": ,\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ID is specsymbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": !@#$%^&,\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "userStatus is specsymbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": @#$%^&\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Strings lines",
							"item": [
								{
									"name": "username is specsymbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 0,\r\n  \"username\": @#$%^&*,\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "firstName is specsymbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": @!#$%^&*,\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "lastName is INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": !@#$%^&*,\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "email is specsymbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": !@#$%^&*(,\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "password is specsymbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": @!#$%^&*(,\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "phone is specsymbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": !@#$%^&*(,\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "username is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 0,\r\n  \"username\": ,\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "firstName is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": ,\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "lastName is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": ,\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "email is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": ,\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "password is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": ,\r\n  \"phone\": \"{{NewPhoneNumber}}\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "phone is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"/*\r",
													"pm.test(\"User ID is correct\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(environment.userID)\r",
													"});*/\r",
													"\r",
													"\r",
													"var schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"code\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"message\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"code\", \"type\", \"message\"]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))\r",
													"pm.environment.set(\"NewFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
													"pm.environment.set(\"NewLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
													"pm.environment.set(\"NewEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"))\r",
													"pm.environment.set(\"NewPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))\r",
													"pm.environment.set(\"NewPhoneNumber\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userID}},\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"{{NewFirstName}}\",\r\n  \"lastName\": \"{{NewLastName}}\",\r\n  \"email\": \"{{NewEmail}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"phone\": ,\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"user",
												"{{MyName}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Updated User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"User ID is uncorrect\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.not.eql(environment.userID)\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"code\": {\r",
											"            \"type\": \"integer\"\r",
											"        },\r",
											"        \"type\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"message\": {\r",
											"            \"type\": \"string\"\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\"code\", \"type\", \"message\"]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"NewName\", pm.variables.replaceIn(\"{{$randomUserName}}\"))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"non-existent\",\r\n  \"username\": \"{{NewName}}\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{MyName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"user",
										"{{MyName}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is  not 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Type is Error\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"error\")\r",
									"});\r",
									"\r",
									"\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"code\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"type\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"message\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"code\", \"type\", \"message\"]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{baseUrl}}/v2/user/NotFound",
							"protocol": "{{protocol}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"user",
								"NotFound"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" //    var jsonData = pm.response.json();  pm.expect(jsonData).is.null});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"DeleteMessage\", pm.variables.replaceIn(\"So, now you are delete the {{NewName}}\"))\r",
									"console.log(pm.environment.get (\"DeleteMessage\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{baseUrl}}/v2/user/{{NewName}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"user",
								"{{NewName}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "protocol",
			"value": "https",
			"type": "string"
		},
		{
			"key": "baseUrl",
			"value": "petstore.swagger.io",
			"type": "string"
		}
	]
}